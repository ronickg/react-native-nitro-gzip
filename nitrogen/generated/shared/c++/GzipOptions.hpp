///
/// GzipOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>

namespace margelo::nitro::nitrogzip {

  /**
   * A struct which can be represented as a JavaScript object (GzipOptions).
   */
  struct GzipOptions {
  public:
    std::optional<double> level     SWIFT_PRIVATE;
    std::optional<double> chunkSize     SWIFT_PRIVATE;

  public:
    explicit GzipOptions(std::optional<double> level, std::optional<double> chunkSize): level(level), chunkSize(chunkSize) {}
  };

} // namespace margelo::nitro::nitrogzip

namespace margelo::nitro {

  using namespace margelo::nitro::nitrogzip;

  // C++ GzipOptions <> JS GzipOptions (object)
  template <>
  struct JSIConverter<GzipOptions> final {
    static inline GzipOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return GzipOptions(
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "level")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "chunkSize"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const GzipOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "level", JSIConverter<std::optional<double>>::toJSI(runtime, arg.level));
      obj.setProperty(runtime, "chunkSize", JSIConverter<std::optional<double>>::toJSI(runtime, arg.chunkSize));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "level"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "chunkSize"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
