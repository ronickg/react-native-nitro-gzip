///
/// JHybridGzipSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridGzipSpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `GzipOptions` to properly resolve imports.
namespace margelo::nitro::nitrogzip { struct GzipOptions; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JPromise.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <string>
#include <optional>
#include "GzipOptions.hpp"
#include "JGzipOptions.hpp"

namespace margelo::nitro::nitrogzip {

  jni::local_ref<JHybridGzipSpec::jhybriddata> JHybridGzipSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridGzipSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridGzipSpec::initHybrid),
    });
  }

  size_t JHybridGzipSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> JHybridGzipSpec::inflate(const std::string& base64, const std::optional<GzipOptions>& options) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* base64 */, jni::alias_ref<JGzipOptions> /* options */)>("inflate");
    auto __result = method(_javaPart, jni::make_jstring(base64), options.has_value() ? JGzipOptions::fromCpp(options.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<std::shared_ptr<ArrayBuffer>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JArrayBuffer::javaobject>(__boxedResult);
        __promise->resolve(__result->cthis()->getArrayBuffer());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::string>> JHybridGzipSpec::deflate(const std::shared_ptr<ArrayBuffer>& input, const std::optional<GzipOptions>& options) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* input */, jni::alias_ref<JGzipOptions> /* options */)>("deflate");
    auto __result = method(_javaPart, JArrayBuffer::wrap(input), options.has_value() ? JGzipOptions::fromCpp(options.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitrogzip
