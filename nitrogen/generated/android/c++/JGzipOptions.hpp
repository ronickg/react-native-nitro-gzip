///
/// JGzipOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "GzipOptions.hpp"

#include <optional>

namespace margelo::nitro::nitrogzip {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "GzipOptions" and the the Kotlin data class "GzipOptions".
   */
  struct JGzipOptions final: public jni::JavaClass<JGzipOptions> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrogzip/GzipOptions;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct GzipOptions by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    GzipOptions toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldLevel = clazz->getField<jni::JDouble>("level");
      jni::local_ref<jni::JDouble> level = this->getFieldValue(fieldLevel);
      static const auto fieldChunkSize = clazz->getField<jni::JDouble>("chunkSize");
      jni::local_ref<jni::JDouble> chunkSize = this->getFieldValue(fieldChunkSize);
      return GzipOptions(
        level != nullptr ? std::make_optional(level->value()) : std::nullopt,
        chunkSize != nullptr ? std::make_optional(chunkSize->value()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JGzipOptions::javaobject> fromCpp(const GzipOptions& value) {
      return newInstance(
        value.level.has_value() ? jni::JDouble::valueOf(value.level.value()) : nullptr,
        value.chunkSize.has_value() ? jni::JDouble::valueOf(value.chunkSize.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrogzip
