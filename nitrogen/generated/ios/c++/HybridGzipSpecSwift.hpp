///
/// HybridGzipSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridGzipSpec.hpp"

// Forward declaration of `HybridGzipSpec_cxx` to properly resolve imports.
namespace NitroGzip { class HybridGzipSpec_cxx; }

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `GzipOptions` to properly resolve imports.
namespace margelo::nitro::nitrogzip { struct GzipOptions; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include <string>
#include <optional>
#include "GzipOptions.hpp"

#include "NitroGzip-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrogzip {

  /**
   * The C++ part of HybridGzipSpec_cxx.swift.
   *
   * HybridGzipSpecSwift (C++) accesses HybridGzipSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridGzipSpec_cxx can directly inherit from the C++ class HybridGzipSpec
   * to simplify the whole structure and memory management.
   */
  class HybridGzipSpecSwift: public virtual HybridGzipSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridGzipSpecSwift(const NitroGzip::HybridGzipSpec_cxx& swiftPart):
      HybridObject(HybridGzipSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroGzip::HybridGzipSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> inflate(const std::string& base64, const std::optional<GzipOptions>& options) override {
      auto __result = _swiftPart.inflate(base64, options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> deflate(const std::shared_ptr<ArrayBuffer>& input, const std::optional<GzipOptions>& options) override {
      auto __result = _swiftPart.deflate(ArrayBufferHolder(input), options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroGzip::HybridGzipSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrogzip
