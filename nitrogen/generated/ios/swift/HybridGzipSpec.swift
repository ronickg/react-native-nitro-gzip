///
/// HybridGzipSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridGzipSpec``
public protocol HybridGzipSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func inflate(base64: String, options: GzipOptions?) throws -> Promise<ArrayBufferHolder>
  func deflate(input: ArrayBufferHolder, options: GzipOptions?) throws -> Promise<String>
}

/// See ``HybridGzipSpec``
public class HybridGzipSpec_base {
  private weak var cxxWrapper: HybridGzipSpec_cxx? = nil
  public func getCxxWrapper() -> HybridGzipSpec_cxx {
  #if DEBUG
    guard self is HybridGzipSpec else {
      fatalError("`self` is not a `HybridGzipSpec`! Did you accidentally inherit from `HybridGzipSpec_base` instead of `HybridGzipSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridGzipSpec_cxx(self as! HybridGzipSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Gzip HybridObject.
 * Implement this protocol to create Swift-based instances of Gzip.
 * ```swift
 * class HybridGzip : HybridGzipSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridGzipSpec = HybridGzipSpec_protocol & HybridGzipSpec_base
